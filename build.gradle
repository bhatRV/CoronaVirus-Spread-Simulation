plugins {
    id 'java'
    id 'application'
    id 'war'
    id 'jacoco'
}

sourceCompatibility = '1.8'
targetCompatibility = '1.8'

repositories {
    jcenter()
}

dependencies {
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.3.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.3.1'
    compile group: 'ch.qos.logback.contrib', name: 'logback-jackson', version: '0.1.5'
    compile group: 'ch.qos.logback.contrib', name: 'logback-json-classic', version: '0.1.5'
    compile group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.10.2'
    compile(group: 'org.docx4j', name: 'docx4j', version: '6.1.2') {
        exclude group: 'org.slf4j', module: 'slf4j-log4j12'
        exclude group: 'log4j', module: 'log4j'
    }
    compileOnly 'org.projectlombok:lombok:1.18.8'
    annotationProcessor 'org.projectlombok:lombok:1.18.8'
    compile group: 'com.googlecode.json-simple', name: 'json-simple', version: '1.1.1'
    compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'
}

test {
    useJUnitPlatform()
    finalizedBy jacocoTestReport // report is always generated after tests run
}

jacocoTestReport {
    dependsOn test // tests are required to run before generating the report
    reports {
        xml.enabled false
        csv.enabled false
        html.destination file("${buildDir}/jacoco/coverage")
    }
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, exclude: 'com/ailo/zombie/apocalypse/dto/**')
        }))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            element = 'CLASS'
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 1.0
            }
            excludes = [
                    'io.reflectoring.coverage.part.PartlyCovered',
                    'io.reflectoring.coverage.ignored.*',
                    'io.reflectoring.coverage.part.NotCovered'
            ]
        }
    }
}
run {
    mainClassName = 'com.ailo.zombie.apocalypse.ZombieApocalypse'
    standardInput = System.in
}

jar {
    manifest {
        attributes('Main-Class': 'com.ailo.zombie.apocalypse.ZombieApocalypse')
    }
}